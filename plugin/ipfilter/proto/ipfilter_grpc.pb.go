// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/ipfilter.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	IPFilter_CheckIP_FullMethodName = "/proto.IPFilter/CheckIP"
	IPFilter_Reload_FullMethodName  = "/proto.IPFilter/Reload"
)

// IPFilterClient is the client API for IPFilter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IPFilterClient interface {
	CheckIP(ctx context.Context, in *CheckIPRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Reload(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type iPFilterClient struct {
	cc grpc.ClientConnInterface
}

func NewIPFilterClient(cc grpc.ClientConnInterface) IPFilterClient {
	return &iPFilterClient{cc}
}

func (c *iPFilterClient) CheckIP(ctx context.Context, in *CheckIPRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, IPFilter_CheckIP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPFilterClient) Reload(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, IPFilter_Reload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IPFilterServer is the server API for IPFilter service.
// All implementations should embed UnimplementedIPFilterServer
// for forward compatibility
type IPFilterServer interface {
	CheckIP(context.Context, *CheckIPRequest) (*emptypb.Empty, error)
	Reload(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
}

// UnimplementedIPFilterServer should be embedded to have forward compatible implementations.
type UnimplementedIPFilterServer struct {
}

func (UnimplementedIPFilterServer) CheckIP(context.Context, *CheckIPRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIP not implemented")
}
func (UnimplementedIPFilterServer) Reload(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reload not implemented")
}

// UnsafeIPFilterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IPFilterServer will
// result in compilation errors.
type UnsafeIPFilterServer interface {
	mustEmbedUnimplementedIPFilterServer()
}

func RegisterIPFilterServer(s grpc.ServiceRegistrar, srv IPFilterServer) {
	s.RegisterService(&IPFilter_ServiceDesc, srv)
}

func _IPFilter_CheckIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPFilterServer).CheckIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IPFilter_CheckIP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPFilterServer).CheckIP(ctx, req.(*CheckIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPFilter_Reload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPFilterServer).Reload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IPFilter_Reload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPFilterServer).Reload(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// IPFilter_ServiceDesc is the grpc.ServiceDesc for IPFilter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IPFilter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.IPFilter",
	HandlerType: (*IPFilterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckIP",
			Handler:    _IPFilter_CheckIP_Handler,
		},
		{
			MethodName: "Reload",
			Handler:    _IPFilter_Reload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/ipfilter.proto",
}
